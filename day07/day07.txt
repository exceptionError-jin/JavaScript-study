*******배열의 고차함수

map, filter, find, findindex, reduce, every, some, sort

keyword
    새로운 배열 반환

map 
    배열의 모든 요소를 순차적으로 순회하며 인자로 주어진 콜백함수의 반환 값으로
    새로운 배열을 생성, 기존배열을 훼손하지 않는다


    const arr = [1,2,3,4,5];
    const newArr = arr.map((el, index, originArr) => {
        return {
            originNumber : el,
            addNumber : el + 10;
        }
    });

    console.log(newArr);

    [{originNumber : 1, addNumber: 11}, {originNumber : 2, addNumber: 12}...]

    새로운배열이 필요할때는 map, 단순반복시 for

filter
    배열의 모든 요소를 순회하며 콜백함수의 반환값이 true인 요소만 추출하여 새로운 배열을 만둔다
    false면 새로운 배열에서 제외된다
    ex) 거름망

    const arr = [
        {
            id = 1,
            name = "jin"
        },
        {
            id = 2,
            name = "jina"
        },
        {
            id = 3,
            name = "ajin"
        }
    ]

    const filterArr = arr.filter((el, index, originArr) => {
        return el.id !== 1;
    });

    console.log(filterArr)

    [{id = 2,name = "jina"},{id = 3,name = "ajin"}]
-----------------------------------------------------

find    
    배열의 모든 요소를 순회하며 주어진 콜백함수를 실행하고 그 반환값이 true인 것 중 첫 번째 요소를 반환

findIndex
    배열의 모든 요소를 순회하며 주어진 콜백함수를 실행하고 그 반환값이 true인 것 중 첫 번째 요소의 인데스를 반환
    찾고자하는 데이터가 없다면 -1을 반환
---------------------------------------------------------------------------------------------------------

reduce  
    누적값을 구할때 사용 요소들이 계산된 누적값과 현재 요소들 return    

-------------------------------------------------------------------------------------

every
    배열의 모든 요소를 순회하며 해당 조건이 모두 만족하면 true, 아니면 false

some
    배열의 모든 요소를 순회하며 해당 조건이 일부 만족하면 true, 아니면 false
-----------------------------------------------------------------------------------

이터러블한 객체
    - 순회 가능한 객체

이터러블 객체의 반복문
    - for   
    - forEach
    - for in
    - for of

배열의 생성
    - array.from
    - array.fill
    