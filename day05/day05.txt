*** Array (배열)

자바스크립트에서 배열은 이름과 인덱스로 참조되는 (정렬된) 값의 집합
배열을 구성하는 각각의 값을 요소라고 하며, 배열의 위치를 가리키는 숫자를 인덱스라고 한다.

ex) 
const arr = [1, 2, 3, 4, 5, 6]

{
    0: "jin"
}

arr[0] = "jin"

순서가 중요할 때 쓰임

인덱스[0] = 1, 인덱스[1] = 2 ...

자바스크립트 배열의 특징
1. 배열 요소의 타입이 고정되어 있지 않습니다
    ex) [1, "jin", {}, true]

    arr[arr.length -1]
    arr.at(-1) -> es2022버전

2. 배열의 인덱스는 연속적이지 않아도 되며, 특정 배열 요소가 비어있을 수 있다.
    const arr = [1,2,3,4]
    arr[1] = 0
    //1,0,3,4

3. 자바스크립트의 배열은 Array라는 객체로 다루어진다

    배열의 길이 = const arr = [1,2,3,4]
                    console.log(arr.length) //4

===============================================================================

****배열의 내장함수
    length, pop, push, unshift, shift, concat, join, reverse, sort, slice, splice ...

    key point
        -원본 배열
        -반환
        -위치

    배열명.push()
        -원본 배열의 *맨 끝*에 요소를 추가
    
    배열명.pop()
        -원본 배열의 맨 끝에 요소를 제거하고 제거된 요소를 반환한다.
        ex) const arr = [1,2,3]

            const el = arr.pop();

            console.log(arr, el)

        배열명.unshift()
            -원본 배열의 맨 처음에 요소를 추가

        배열명.shift()
            -원본 배열의 맨 처음 값을 제거, 제거된 요소를 반환

        배열명.join()
            -배열 요소 사이에 원하는 문자를 삽입한 문자열을 반환

        배열명.reverse()
            -원본배열의 순서를 역순 배치

        배열명.sort()
            -원본배열 정렬(오름차순, 내림차순)

        배열명.splice(start, deleteCount, item)
            -원본 배열의 요소를 제거하고 해당 요소 위치에 값을 추가

        배열명.slice(start, count)
            - 인자로 지정된 배열의 부분을 복사한다. 
            - 이 때 원본 배열은 수정되지 않는다.


        // 특정 값의 위치를 찾거나 유무를 찾을 때

        배열명.indexOf()
            인자(파라미터, 매개변수)로 전달받은 값이 해당 배열에 있는지 인덱싱하고
            값이 있다면 가장 먼저 있는 요소의 인덱스 값을 반환, 없다면 -1반환

            const arr = [1,2,3,4]
            const index = arr.indexOf(2) // 1
            const index = arr.indexOf(3) // 2
            const index = arr.indexOf(5) // -1

            if(index < 0) return;
                //조건식에 특정한 변수명만 들어가면 해당 변수가 비어있는지 아니지만 확인
                //indexOf의 경우 요소가 없으면 -1반환 -> 일반 조건식 비교로 비교해서는 안된다.
                //반드시 부등호로 비교

        배열명.includes()

            const arr = [1,2,3,4,5]
            arr.includes(5) //true

            if(el){
                ...
            }

        배열명.lastIndexOf()
            indexOf반대