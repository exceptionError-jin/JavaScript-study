제어문  

    * 입력 - 연산 - 출력(설계 및 검증)
    * 디버깅하기

    ex) 구글링할 때 중요한 것(로우 레벨로 검색)

        예약번호를 조회해서 고객이름을 검색
        --> 오브젝트에서 특정한 값 조회 --> find, findIndex

    조건문
        if["만약에, 아니면", 조건식]
        switch["값", "case", "break"]

    반복문
        주어진 "조건식"의 결과가 참이 될 때까지 해당 블럭(구역, {...})의 로직(기능, 코드)를 반복 실행한다

        1. for --> 가족(forEach, for...in, for...of)
            ex) for(초기화식; 조건식; 증감식){
                조건식이 참인 경우 실행할 문장
            }

            for(let i = 0; i < 10; i++){
                console.log(i); -> 반복 실행할 문장
            }


        2.while
            특정 코드 반복실행하고싶을 때 (무한반복)
            조건식이 true일 동안 실행할 문장

            while(true){
                let count = 0;
                ..무한반복
                count++;
                if(count===3)break;
            }

            do... while
                false여도 무조건 한 번은 실행하고 반복

            do{
                console.log(count)
            }   
            while(count < 3) // 3


=====================================================================
함수(Function)
    자바스크립트는 함수 지향형 프로그래밍
    최근 들어서는 객체 지향의 장점들이 녹아드는 중

    함수 지향이란?
        프로그래밍 패러다임의 한 종류
        순수 함수를 조합하고 함수를 일급 객체로서 사용하여 프로그래밍 하는 방식

    프로그래밍 패러다임이란?
        개발자에게 프로그래머로서의 관점을 갖게하고 결정하는 역할 => 개발 방법

        명령형
            절차 지향 -> 순서대로 실행함(폭포수), 컴퓨터의 처리구조와 비슷, 속도가 빠름(C, cobol...)
            객체 지향 -> 객체(집단)의 상호 작용을 중요시한다, 유지보수 용이함, 속도 느림(java, c++)

        선언형(어떻게 할 것인가 보다 무엇을 할 것인가가 중요)
            함수 지향 -> 순수 함수를 조합하고 프로그래밍하는 방식(javaScript) 객체 지향과 비슷하다 

        함수지향 프로그래밍 관련 용어

            불변성 = 함수 밖에서 데이터의 변형을 일으켜서는 안된다
            클로저 = 부모 함수가 실행 종료되어도 참조할 수 있는 내부 함수는 기억된다
            순수함수 = 입력 값에만 의존하고 부수효과는 연산에 영향을 미치지 않는다
            일급객체함수 = 함수를 입력값(파라미터, 매개변수, 인자)으로 사용할 수 있고
                            반환 값(출력)으로 사용할 수 있다

            유지관리가능성 = 외부 효과에 의존되지 않으면 해당 부분만 수정하면 되기 때문에
                            유지보수가 쉽다

            모듈화 = 함수를 분리하여 재사용 및 관리가 용이하도록 구성해야한다
            부수효과 = 함수 밖에서 함수의 연산에 영향을 끼치면 안된다(외부 효과, 사이드이펙트)
            참조투명성 = 동일한 값에는 항상 동일한 반환 값

            p.s 위 언어는 모두 완벽하게 이해하고 코드를 작성해야한다면
                너무 어려움 따라서 당장은
                자바스크립트는 함수를 기반으로 하는 함수 지향형 프로그래밍이다.

==============================================================================================

함수
    어떠한 기능을 만든다에 의존하고 초점
    
        나는 두개의 숫자를 전달받고 
        해당 함수를 합치는 함수를 작성하고 싶다.

        선언
            -선언부는 함수를 실행하는 것이 아니라
            기능만 구성하여 컴퓨터에게 기억시키는 것 -> 재사용

            Function 함수명(파라미터1, 파라미터2, ...)
                           ----------------------- --> 실행부에서 전달받은 값(파람, 매개변수, 인자)
            {
                ... 작성하고 싶은 연산
                파라미터1 + 파라미터2
                반환값(생략가능)
            }

        실행
            함수명(전달값1, 전달값2); --> 전달값1이 파라미터1로감, 전달값2가 파라미터2로감




        Function sum(num1, num2){
            console.log(num1 + num2);
        }

        sum(3,5);

        반환값

            sum(3,5);
            +10;

            console.log(sum(3,5) + 10);
                        -------------- --> undefined

            Function sum(num1, num2){
                console.log(num1 + num2);
                return num1 + num2;
            }

            console.log(sum(3,5) + 10); //18
            
            *반환 값은 해당 함수 실행부에 값을 부여한다는 의미
            만약에 return이 없다면 비즈니스 로직만 실행하고 값은 undefined

==================================================================================
1. 기명함수, 익명함수
    기명함수 : 이름을 지어준다
    익명함수 : 이름이 없는 함수

    Function hello(){
        console.log("hello")
    }

    Function(){
        console.log("world")
    }
    -- 다른 함수의 매개변수로 전달되어 실행되는 함수(콜백함수, 클로저, 즉시실행함수)
    -- 재사용 가능성이 없는 경우


2.재귀함수, 즉시실행함수
    재귀함수 : 
    즉시실행함수 : 



3.화살표 함수
