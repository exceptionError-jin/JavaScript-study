DOM API
    (Document Object Model)문서 객체 모델
        흔히 html에서 사용하는 div, span, input과 같은 요소를 DOM이라고 한다

    (Aplication Programming Interface) API
        응용 프로그램 사이에서 통신에 사용되는 언어와 메세지를 이야기함
------------------------------------------------------------------------------------

DOM selector
    ex) <div id='menu'></div>

    1.document.getElementById() //단일 객체 반환
    2.document.getElementsByClassName() 
        -HttpCollection
    3.document.getElementsByTagname()
        -HttpCollection
    4.document.getElementsByname() // 유사 배열 객체 반환
        -NodeList


    5.document.querySelector() //단일 객체 반환
    6.document.querySelectorAll()
        -NodeList

    * NodeList vs HttpCollection
        NodeList : none-live -> 한번 지정한상태 그대로감
        HttpCollection : live -> 변화 상태를 바로감지한다

    * 유사배열객체
        for문 사용가능
    
    *for of, for 사용가능
    *forEach, map, filter 사용불가

    * NodeList와 HttpCollection을 배열로 사용하고싶다

    1.Array.from(el)
    2.const arr = [...el]
    3.HttpCollection.prototype.forEach = Array.prototype.forEach(권장x)
-------------------------------------------------------------------------------

    DomAPI 왜 사용하나?

        사용자 행위에 따라 
        html요소(div,span)의 properties를 바꾸기 위해 사용

        => html, css 정적인 페이지 => 동적으로 만들기 위해서
--------------------------------------------------------------------------------
    properties(속성)
        개발자 도구에서 확인 가능, dom api를 사용하는 궁극적인 목표

        value
        innerText
        innerHTML
        style
        classList
        onclick
        onchange
        ...
        event ...

--------------------------------------------------------------------------------

    addEventListener
        자바스크립트에서 가장 권장되는 방식
        이 방식을 이용하면 하나의 요소에 여러개의 이벤트 핸들러를 등록가능

    addEventListener("이벤트명", 콜백함수, options)
    options(캡처링)의 경우 default가 false이므로 false일 경우 생략

    ex)
        요소(dom) || window.addEventListener("이벤트명", 콜백함수, options)

    자주 사용하는 이벤트명
        click : 요소를 클릭

        mouseover : 요소에 마우스 올림
        mouseleave : 요소에서 마우스가 떠남
        mousedown : 요소를 마우스로 누르고있음
        mouseup : 요소를 누르고있는 마우스를 뗀상태
        mousewheal : 마우스 휠이 이동될때
        mousemove : 마우스가 움직일 때마다

        focus : 폼 요소의 입력요소가 활성화 되어있을때
        blur : 포커스에서 벗어났을 때
        change : 폼 요소의 입력 요소의 값이 변경되었을 때

        keypress : 키를 누른순간
        keyup : 키를 눌렀다가 뗀순간
        keydown : 키를 누르고 있는 순간

        window ,document(html상위요소)

        load - 웹 페이지가 로드 되었을 때
        resize - 웹 페이지의 사이즈가 조정 되었을 때
        scroll - 스크롤바의 움직임이 생겼을 때
        unloads - 웹 페이지가 닫혔을 때

--------------------------------------------------------------------------------

classList   
    해당 요소가 가지고 있는 클래스의 목록을 나타내는 DOM properties

    <div class="jin on add flex"/>

    document.getElementsByClassName("jin").classList

    classList.contain("on")
        해당 클래스가 있는지 없는지 여부를 판단하여 boolean형태로 반환

    classList.add("클래스명")
        해당 요소에 인자로 전달된 클래스를 dom에 추가

    classList.remove("class")
        해당 요소에 인자로 전달된 클래스를 dom에서 제거

    ex)
        <div class="tab" />
        <div class="tab" />
        <div class="tab on" />
        <div class="tab" />
        <div class="tab" />

        const tabs = document.querySelectorAll(".tab")

        tabs.forEach((el) => {
            el.addEventListener('click', e => {
                console.log(e);
                const selectTab = e.target;
                selectTab.classList.add("on");
            });
        });


        **this(자기 자신)
            자바스크립트의 this는 동적으로 바인딩(결정)되며
            누가 this를 불렀는가에 따라서 값이 바뀐다

            addEventListener의 this는 이벤트 자체를 불러온다
            따라서 이벤트가 일어난 대상을 찾기 위해선 e.target을 통해 명확한 요소를 불러올 수 있음

-------------------------------------------------------------------------------------------------------

    attribute(속성)

        setAttribute('속성명', 속성값) - 설정
        getAttribute('속성명') - 속성값의 조회
        removeAttribute('속성명') - 삭제


-------------------------------------------------------------------------------------------------------

    캡처링, 버블링
        
        버블링
            한 요소에 이벤트가 발생하면, 이어서 부모 요소의 핸들러가 동작
            => 하위 요소의 이벤트가 부모 요소의 이벤트로 전파

        캡처링
            버블링과 반대, 부모 요소 클릭시 하위 요소로 이벤트 전파
            기본 옵션 false 
            addEventListener의 options 인자로 t/f를 변동 가능

            ex) 
            el.addEventListener('click', function(){}, true)


    이벤트 전파 방지