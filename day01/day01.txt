JS(Java Script)

1996년 3월 탄생(10일 만에 만들어짐)

"html, css" -> 페이지가 동적으로 움직이지 않았음
            -> 페이지를 움직일 수 있게 만들자
            -> 자바스크립트 탄생

구글이 2009년 v8엔진 출시
    자바스크립트를 필요에 따라 컴파일 할 수 있도록 성능을 높이는 엔진

java script === java
    mocha --> liveScript --> 자바의 이름을 빌려서 자바스크립트로 정해짐

java script 적용법

    html태그 안에 (head, body에 써도 상관 없음
                    위에서 아래로 내려가기때문에 그거 조심)
    <script>
        ... java script
    <script/>

    위치와 순서 중요
    위에서 아래로 읽음, 선언되어있지 않은 값이나 DOM을 가져오면 못 읽음

외부 사용법
    *.js (확장자명은 js)
    <script src="경로"/>

====================================================================

자바스크립트 입출력                          매우중요!!!!!!!!!!!
    입력 -> 연산 -> 출력(모든 프로그램 통용)

    만약 a의 값이 1이라면
    어떠한 규칙을 적용하여 무언가를 해아함

    구글링(low-level의 알고리즘 단위로 검색해야함)
        ex) 쇼핑몰만드는 프로젝트

            특정 배열에서 어떠한 값을 찾아야할 때

    출력값은 이미 알고 있는 값
    출력을 토대로 입력 값을 일부 예상
    연산을 하기 전 먼저 설계를 완료하라 --> 구현가능한지 검증하고 짜야함
    설계가 완료되면 코드를 작성한다
    예외 상황을 예상한다(오류 예측)

    1.입력
        prompt()

    2. * 출력 -- 디버깅
        console.log()
        console.error()
        
        알림창(사용자에게 보여주기 위한 용도)
        반드시 browser환경에서만 작동해야한다
        alert()
        
        confirm()



==================================================================
    자바스크립트가 브라우저 내에서 작동한다는 건
        alert, confirm과 같이 브라우저 내부 기능을 사용할때
        DOM API(요소나 태그)에 접근할때

    .JS확장자를 터미널로 직접 실행(브라우저X)

    node.js설치

        크롬의 v8엔진을 브라우저 바깥으로 꺼내어 js 브라우저가 아닌 환경에서도
        실행시킬 수 있도록 하는 런타임(환경)

        이로인해 개발자들은 js로 웹서버를 구성하여 백엔드만들기 가능
        프론트엔드 프레임워크 개발도 가능

        reactjs와 js 라이브러리들이 nodejs환경에서 실행
        https://nodejs.org/ko/

===================================================================

자바스크립트 자료형
    컴퓨터에서 어떠한 값을 사용하려고 하면
    컴퓨터에게 값을 기억 시킬 필요가 있다

    예를 들면
    나는 a라는 바구니에 숫자 5를 담아놓을거야(선언)
    어디서든 a라는 이름을 사용하면 숫자5가 나오도록 할거야

    이러한 과정에서 a라는 바구니는 변수
    이때 a라는 자료형은 number

    이러한 과정을 런타임(실행)이후 판단하기 때문에
    자료형은 존재하지만 어떠한 값이든 변수에 담을 수 있음

    ex)
        java(정적 타입)
            int a = 5; // number
            int a = "jin" -> 타입이 달라서 사용불가


        javascript(동적 타입)
            let(var) a = 5; //number
            let a = "jin" //string
            -> 코드를 실행했을때 판단하기 때문에 사용가능

        typescript(동적 자바스크립트를 정적 타입으로 바꿈)
            let a:number = 5;

=================================================================

    자료형(단위)의 종류
        * 원시타입
            number(숫자, 정수, 실수 구분안함)
            string(문자열)
            boolean(true, false)
            null(값이 명확히 비어있다고 지정해준 상태)
                ex) let a = null;
            undefined(값이 지정되어있지 않은 상태)
                ex) let a;
            symbol(이터러블 오브젝트의 키 값으로 사용된다)

        * 객체타입
            object : 객체[집단]

            자바스크립트를 이루고 있는 원시값을 제외한 모든 값은 객체
            자바스크립트에 배열과 map, set의 경우는 모두 눈속임에 불과하다

        * 저장 공간이 다르다
            원시타입은 콜스택(자바스크립트 메모리 공간)
            객체타입은 힙(주소값을 참조하기 위해 주소값을 변수에 할당)

=========================================================================

변수
    var(x), let, const

    1.자바스크립트에서 변수선언시 자료형을 필요로 하지 않음
        js는 인터프리터언어로 기계어로 컴파일x
        따라서 실행 시 자료형을 알아서 추론해줌

    2.console.log() //

    ex) let a = "안녕";
        console.log(a)
    
    변수/상수를 선언하는 이유는 알아보기 쉽다

    컴퓨터에게 값을 기억시키고 재사용가능

    3.변수(상수)의 선언 방법
        let변수명; (선언) --> undefined

        변수명 = 5;(할당)

        --> let 변수명 = 5;(선언과 할당 같이함)

    4.변수의 종류
        * 변수(변하는 값)
            ex)
                let a = 5;
                a = 6; --> 재할당

    5.상수(항상 같은 값)
        ex)
            const a = 5;
            a = 6; // 안됨

    6.var의 문제점
        중복 선언이 가능함

        호이스팅(면접질문!!!!!!!!!!!!!!!!!)
            실행이전에 평가과정에서 선언부를 먼저저장
            var의 경우 선언부가 먼저 저장되어 실행시 선언되지 않아도
            undefined라는 값을 갖고있고 이러한 선언이

            마치 선언부가 상단에 올라오는 효과 같다고 하여
            개발자들 사이에서 이를 호이스팅이라고 부른다

            이러한 점은 개발자들에게 혼동을 준다
            개선 -> es6(ES2015) 이크마스크립트6

            이 이후에는 let과 const를 만들어서 
            중복선언 및 호이스팅을 개선하였다
            (error)    (error)


    